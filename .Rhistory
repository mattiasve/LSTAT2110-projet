xlab('Type') + ylab('cos2') + labs(color='Type')
v
vcontrib <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`contribution [%]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('Contribution [%]') + labs(color='Type')
vcos
vcontrib
# individus mal représenté sur les 2 premières composantes
cos2_ind <- as.data.frame(round(sort(rowSums(res$ind$cos2[,1:2])), digits = 3))
contrib_ind <- as.data.frame(round(sort(rowSums(res$ind$contrib[,1:2])), digits = 3))
df_ind <- data.frame(cos2_ind, contrib_ind, as.factor((abalone[,1])))
colnames(df_ind) <- c('cos2 [-]', 'contribution [%]', 'Type')
vcos <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`cos2 [-]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('cos2') + labs(color='Type')
vcontrib <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`contribution [%]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('Contribution [%]') + labs(color='Type')
vcos
vcontrib
```{r echo=FALSE, out.width="45%", fig.align='center', fig.cap='test'}
# individus mal représenté sur les 2 premières composantes
par(mfrow=c(1,2))
cos2_ind <- as.data.frame(round(sort(rowSums(res$ind$cos2[,1:2])), digits = 3))
contrib_ind <- as.data.frame(round(sort(rowSums(res$ind$contrib[,1:2])), digits = 3))
df_ind <- data.frame(cos2_ind, contrib_ind, as.factor((abalone[,1])))
colnames(df_ind) <- c('cos2 [-]', 'contribution [%]', 'Type')
vcos <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`cos2 [-]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('cos2') + labs(color='Type')
vcontrib <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`contribution [%]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('Contribution [%]') + labs(color='Type')
vcos
vcontrib
# individus mal représenté sur les 2 premières composantes
vcontrib <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`contribution [%]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('Contribution [%]') + labs(color='Type')
vcontrib
# individus mal représenté sur les 2 premières composantes
cos2_ind <- as.data.frame(round(sort(rowSums(res$ind$cos2[,1:2])), digits = 3))
contrib_ind <- as.data.frame(round(sort(rowSums(res$ind$contrib[,1:2])), digits = 3))
df_ind <- data.frame(cos2_ind, contrib_ind, as.factor((abalone[,1])))
colnames(df_ind) <- c('cos2 [-]', 'contribution [%]', 'Type')
vcos <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`cos2 [-]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('cos2') + labs(color='Type')
vcos
# individus mal représenté sur les 2 premières composantes
cos2_ind <- as.data.frame(round(sort(rowSums(res$ind$cos2[,1:2])), digits = 3))
contrib_ind <- as.data.frame(round(sort(rowSums(res$ind$contrib[,1:2])), digits = 3))
df_ind <- data.frame(cos2_ind, contrib_ind, as.factor((abalone[,1])))
colnames(df_ind) <- c('cos2 [-]', 'contribution [%]', 'Type')
vcos <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`cos2 [-]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('cos2') + labs(color='Type')
vcos
# individus mal représenté sur les 2 premières composantes
vcontrib <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`contribution [%]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('Contribution [%]') + labs(color='Type')
vcontrib
#individus mal représenté sur les 2 premières composantes
cos2_ind <- as.data.frame(round(sort(rowSums(res$ind$cos2[,1:2])), digits = 3))
contrib_ind <- as.data.frame(round(sort(rowSums(res$ind$contrib[,1:2])), digits = 3))
df_ind <- data.frame(cos2_ind, contrib_ind, as.factor((abalone[,1])))
colnames(df_ind) <- c('cos2 [-]', 'contribution [%]', 'Type')
vcos <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`cos2 [-]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('cos2') + labs(color='Type')
vcos
vcontrib <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`contribution [%]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('Contribution [%]') + labs(color='Type')
vcontrib
#individus mal représenté sur les 2 premières composantes
cos2_ind <- as.data.frame(round(sort(rowSums(res$ind$cos2[,1:2])), digits = 3))
contrib_ind <- as.data.frame(round(sort(rowSums(res$ind$contrib[,1:2])), digits = 3))
df_ind <- data.frame(cos2_ind, contrib_ind, as.factor((abalone[,1])))
colnames(df_ind) <- c('cos2 [-]', 'contribution [%]', 'Type')
vcos <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`cos2 [-]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('cos2') + labs(color='Type')
vcos
#individus mal représenté sur les 2 premières composantes
cos2_ind <- as.data.frame(round(sort(rowSums(res$ind$cos2[,1:2])), digits = 3))
contrib_ind <- as.data.frame(round(sort(rowSums(res$ind$contrib[,1:2])), digits = 3))
df_ind <- data.frame(cos2_ind, contrib_ind, as.factor((abalone[,1])))
colnames(df_ind) <- c('cos2 [-]', 'contribution [%]', 'Type')
vcos <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`cos2 [-]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('cos2') + labs(color='Type')
vcos
vcontrib <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`contribution [%]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('Contribution [%]') + labs(color='Type')
vcontrib
#individus mal représenté sur les 2 premières composantes
cos2_ind <- as.data.frame(round(sort(rowSums(res$ind$cos2[,1:2])), digits = 3))
contrib_ind <- as.data.frame(round(sort(rowSums(res$ind$contrib[,1:2])), digits = 3))
df_ind <- data.frame(cos2_ind, contrib_ind, as.factor((abalone[,1])))
colnames(df_ind) <- c('cos2 [-]', 'contribution [%]', 'Type')
vcos <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`cos2 [-]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('cos2') + labs(color='Type')
vcos
vcontrib <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`contribution [%]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('Contribution [%]') + labs(color='Type')
vcontrib
# carte des individus
## basique
plot.PCA(res, choix = "ind", axes=c(1,2), label='none')
## avec sexe
Dataset_PCA2 <- cbind(Dataset_PCA, abalone[1])
res2 <- PCA(Dataset_PCA2, ncp = 2, graph = TRUE,
quali.sup = c(9))
plot(res2, choix = "ind", habillage = 9,
col.hab=c('lightsalmon', 'darkolivegreen4', 'steelblue1'),
label='none') +theme_gray()
# carte des individus
## basique
#plot.PCA(res, choix = "ind", axes=c(1,2), label='none')
## avec sexe
Dataset_PCA2 <- cbind(Dataset_PCA, abalone[1])
res2 <- PCA(Dataset_PCA2, ncp = 2, graph = TRUE,
quali.sup = c(9))
plot(res2, choix = "ind", habillage = 9,
col.hab=c('lightsalmon', 'darkolivegreen4', 'steelblue1'),
label='none') +theme_gray()
# carte des individus
## basique
#plot.PCA(res, choix = "ind", axes=c(1,2), label='none')
## avec sexe
Dataset_PCA2 <- cbind(Dataset_PCA, abalone[1])
res2 <- PCA(Dataset_PCA2, ncp = 2, graph = TRUE,
quali.sup = c(9), graph=FALSE)
# carte des individus
## basique
#plot.PCA(res, choix = "ind", axes=c(1,2), label='none')
## avec sexe
Dataset_PCA2 <- cbind(Dataset_PCA, abalone[1])
res2 <- PCA(Dataset_PCA2, ncp = 2, graph = FALSE,
quali.sup = c(9))
plot(res2, choix = "ind", habillage = 9,
col.hab=c('lightsalmon', 'darkolivegreen4', 'steelblue1'),
label='none') +theme_gray()
plot(res2, choix = "ind", habillage = 9,
col.hab=c('lightsalmon', 'darkolivegreen4', 'steelblue1'),
label='none') +theme_gray()+ggtitle('')
```{r echo=FALSE}
# carte des individus
## basique
#plot.PCA(res, choix = "ind", axes=c(1,2), label='none')
## avec sexe
Dataset_PCA2 <- cbind(Dataset_PCA, abalone[1])
# carte des individus
## avec sexe
Dataset_PCA2 <- cbind(Dataset_PCA, abalone[1])
res2 <- PCA(Dataset_PCA2, ncp = 2, graph = FALSE,
quali.sup = c(9))
plot(res2, choix = "ind", habillage = 9,
col.hab=c('lightsalmon', 'darkolivegreen4', 'steelblue1'),
label='none') +theme_gray()+ggtitle('')
#-------- ANALYSE DISCRIMINANTE LINEAIRE ------
# dataset pour LDA
abalone.lda <- lda(Type ~ .,
data = abalone,
method = "mle")
abalone.lda
z <- predict(abalone.lda)$x
z2 <- data.frame(z, abalone[,1])
cor(abalone[, 1], z)
ggplot(z2, aes(LD1, LD2,color=Type)) + geom_point(shape=20,size=0.5)
z2
View(z2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = "")
knitr::opts_chunk$set(fig.cap = "")
ggplot(z2, aes(LD1, LD2,color=z2$abalone...1.)) + geom_point(shape=20,size=0.5) #+ labs(title = "Variables canoniques selon les 2 premiers axes")
ggplot(data=z2, aes(LD1, LD2,color=z2$abalone...1.)) + geom_point(shape=20,size=0.5)
ggplot(data=z2, aes(LD1, LD2,color=z2$abalone...1.)) +
geom_point(shape=20,size=0.5) +
labs(color='Type')
abalone.lda <- lda(Type ~ .,
data = abalone,
method = "mle")
abalone.lda
z <- predict(abalone.lda)$x
z2 <- data.frame(z, abalone[,1])
#cor(abalone[, 1], z)
ggplot(data=z2, aes(LD1, LD2,color=z2$abalone...1.)) +
geom_point(shape=20,size=0.5) +
labs(color='Type')
abalone.lda <- lda(Type ~ .,
data = abalone,
method = "mle")
#abalone.lda
z <- predict(abalone.lda)$x
z2 <- data.frame(z, abalone[,1])
#cor(abalone[, 1], z)
ggplot(data=z2, aes(LD1, LD2,color=z2$abalone...1.)) +
geom_point(shape=20,size=0.5) +
labs(color='Type')
ggplot(data=z2, aes(LD1, LD2,color=z2$abalone...1.)) +
geom_point(shape=20,size=2) +
labs(color='Type')
ggplot(data=z2, aes(LD1, LD2,color=z2$abalone...1.)) +
geom_point(shape=20,size=1) +
labs(color='Type')
ggplot(data=z2, aes(LD1, LD2,color=z2$abalone...1.)) +
geom_point(shape=20,size=1) +
scale_color_manual(values=c('lightsalmon', 'darkolivegreen4', 'steelblue1')) +
labs(color='Type')
ggplot(data=z2, aes(LD1, LD2,color=z2$abalone...1.)) +
geom_point(shape=20,size=1) +
scale_color_manual(values=c('lightsalmon', 'darkolivegreen4', 'steelblue1')) +
labs(color='Type') +
theme_gray()
new <- matrix(c(0.400,0.380,0.090,0.2500,0.1705,0.1300,0.0700, 10),nrow=1) #nouvelles observations random
colnames(new) <- colnames(Dataset)[2:8]          #nom des colones
colnames(new) <- colnames(abalone)[2:8]          #nom des colones
rownames(new) <- "new"
new <- as.data.frame(new)
new
new <- matrix(c(0.400,0.380,0.090,0.2500,0.1705,0.1300,0.0700, 10),nrow=1) #nouvelles observations random
colnames(new) <- colnames(abalone)[2:8]          #nom des colones
View(new)
rownames(new) <- "new"
new <- as.data.frame(new)
new
colnames(abalone)
colnames(abalone)[2]
colnames(abalone)[2:8]
colnames(new) <- colnames(abalone)[2:9]                                    #nom des colones
rownames(new) <- "new"
new <- as.data.frame(new)
new
# Prédiction d'un nouvel individu
Prédiction <- predict(abalone.lda, newdata = new)$class
Prédiction <- as.data.frame(Prédiction)
pred_new <- t(Prédiction)
colnames(pred_new) <- "new"
pred_new
# Qualité :
# Table de validation
Dataset.pred <- predict(abalone.lda, newdata = abalone[,2:9])$class
Dataset_dataframe <- as.data.frame(Dataset)
Dataset_dataframe <- as.data.frame(abalone)
validation <- table(Dataset_dataframe[,1], Dataset.pred)
validation
# Qualité de la règle de discrimination
qualité <- sum(diag(validation))/nrow(Dataset)
# Qualité de la règle de discrimination
qualité <- sum(diag(validation))/nrow(abalone)
qualité
new <- matrix(c(0.400,0.300,0.090,0.500,0.2000,0.1000,0.1500, 12),nrow=1) #nouvelles observations random
colnames(new) <- colnames(abalone)[2:9]                                    #nom des colones
rownames(new) <- "new"
new <- as.data.frame(new)
new
# Prédiction d'un nouvel individu
Prédiction <- predict(abalone.lda, newdata = new)$class
Prédiction <- as.data.frame(Prédiction)
pred_new <- t(Prédiction)
colnames(pred_new) <- "new"
pred_new
# Qualité :
# Table de validation
Dataset.pred <- predict(abalone.lda, newdata = abalone[,2:9])$class
Dataset_dataframe <- as.data.frame(abalone)
validation <- table(Dataset_dataframe[,1], Dataset.pred)
validation
# Qualité de la règle de discrimination
qualité <- sum(diag(validation))/nrow(abalone)
qualité
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = "")
library(data.table)
library(naniar)
library(FactoMineR)
library(reshape2)
library(devtools)
library(factoextra)
library(ggplot2)
library(MASS)
# import data
abalone <- read.csv('abalone.csv')
abalone$Type <- as.factor(abalone$Type)
#summary(abalone)
moyennes <- round(colMeans(abalone[2:9]),3)
moyennes <- as.data.frame(moyennes)
t(moyennes)
# 2. Matrice de corrélation
corr <- round(cor(abalone[2:9]), digits = 2)
melted_corr <- melt(corr)
corr_matrix <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=14, hjust = 0.5),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1) )
corr_matrix
#préparer la PCA
Dataset_PCA <- abalone[2:9]
R <- cor(Dataset_PCA)
res<-PCA(Dataset_PCA, graph=FALSE)
# Vecteurs propres et valeurs propres :
VaP <- round(eigen(R)$values,4)
VaP <- as.data.frame(VaP)
t(VaP)
# pourcentage de variance et variance cumulée
par(mfrow=c(1,2))
barplot(res$eig[,"percentage of variance"], xlab = "Composantes", ylab="Pourcentage de variance")
barplot(res$eig[,"cumulative percentage of variance"],xlab="Composantes",ylab="Pourcentage cumulatif de variance")
# Combien de composantes retenir
par(mfrow=c(1,1))
barplot(res$eig[,"eigenvalue"], xlab = "Composantes", ylab="Valeur propre")
abline(h = 1, lty = "dashed")
#Valeurs propres et pourcentages de variance
par(mfrow=c(1,2))
plot(res$eig[,"eigenvalue"],type="l",xlab="Composantes",ylab="Valeurs propres")
plot(res$eig[,"percentage of variance"],type="l",xlab="Composantes",ylab="Pourcentage de variance")
cos2 <- round(sort(rowSums(res$var$cos2[,1:2])), digits = 3)
contrib <- round(sort(rowSums(res$var$contrib[,1:2])), digits = 3)
cos2 <- as.data.frame(cos2)
contrib <- as.data.frame(contrib)
df_var <- data.frame(cos2, contrib)
colnames(df_var) <- c('cos2 [-]', 'contribution [%]')
t(df_var)
## cercle de corrélation
plot.PCA(res, choix = "var", axes=c(1,2))
#individus mal représenté sur les 2 premières composantes
cos2_ind <- as.data.frame(round(sort(rowSums(res$ind$cos2[,1:2])), digits = 3))
contrib_ind <- as.data.frame(round(sort(rowSums(res$ind$contrib[,1:2])), digits = 3))
df_ind <- data.frame(cos2_ind, contrib_ind, as.factor((abalone[,1])))
colnames(df_ind) <- c('cos2 [-]', 'contribution [%]', 'Type')
vcos <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`cos2 [-]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('cos2') + labs(color='Type')
vcos
vcontrib <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`contribution [%]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('Contribution [%]') + labs(color='Type')
vcontrib
# carte des individus
## avec sexe
Dataset_PCA2 <- cbind(Dataset_PCA, abalone[1])
res2 <- PCA(Dataset_PCA2, ncp = 2, graph = FALSE,
quali.sup = c(9))
plot(res2, choix = "ind", habillage = 9,
col.hab=c('lightsalmon', 'darkolivegreen4', 'steelblue1'),
label='none') +theme_gray()+ggtitle('')
abalone.lda <- lda(Type ~ .,
data = abalone,
method = "mle")
#abalone.lda
z <- predict(abalone.lda)$x
z2 <- data.frame(z, abalone[,1])
#cor(abalone[, 1], z)
ggplot(data=z2, aes(LD1, LD2,color=z2$abalone...1.)) +
geom_point(shape=20,size=1) +
scale_color_manual(values=c('lightsalmon', 'darkolivegreen4', 'steelblue1')) +
labs(color='Type') +
theme_gray()
new <- matrix(c(0.400,0.300,0.090,0.500,0.2000,0.1000,0.1500, 12),nrow=1) #nouvelles observations random
colnames(new) <- colnames(abalone)[2:9]                                   #nom des colones
rownames(new) <- "new"
new <- as.data.frame(new)
new
# Prédiction d'un nouvel individu
Prédiction <- predict(abalone.lda, newdata = new)$class
Prédiction <- as.data.frame(Prédiction)
pred_new <- t(Prédiction)
colnames(pred_new) <- "new"
pred_new
# Qualité :
# Table de validation
Dataset.pred <- predict(abalone.lda, newdata = abalone[,2:9])$class
Dataset_dataframe <- as.data.frame(abalone)
validation <- table(Dataset_dataframe[,1], Dataset.pred)
validation
# Qualité de la règle de discrimination
qualité <- sum(diag(validation))/nrow(abalone)
qualité
summary(abalone)
res$var$cos2
res$var$contrib
plot.PCA(res, choix = "var", axes=c(1,2))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = "")
library(data.table)
library(naniar)
library(FactoMineR)
library(reshape2)
library(devtools)
library(factoextra)
library(ggplot2)
library(MASS)
# import data
abalone <- read.csv('abalone.csv')
abalone$Type <- as.factor(abalone$Type)
#summary(abalone)
moyennes <- round(colMeans(abalone[2:9]),3)
moyennes <- as.data.frame(moyennes)
t(moyennes)
# 2. Matrice de corrélation
corr <- round(cor(abalone[2:9]), digits = 2)
melted_corr <- melt(corr)
corr_matrix <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "white", size = 4) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size=14, hjust = 0.5),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1) )
corr_matrix
#préparer la PCA
Dataset_PCA <- abalone[2:9]
R <- cor(Dataset_PCA)
res<-PCA(Dataset_PCA, graph=FALSE)
# Vecteurs propres et valeurs propres :
VaP <- round(eigen(R)$values,4)
VaP <- as.data.frame(VaP)
t(VaP)
# pourcentage de variance et variance cumulée
par(mfrow=c(1,2))
barplot(res$eig[,"percentage of variance"], xlab = "Composantes", ylab="Pourcentage de variance")
barplot(res$eig[,"cumulative percentage of variance"],xlab="Composantes",ylab="Pourcentage cumulatif de variance")
# Combien de composantes retenir
par(mfrow=c(1,1))
barplot(res$eig[,"eigenvalue"], xlab = "Composantes", ylab="Valeur propre")
abline(h = 1, lty = "dashed")
#Valeurs propres et pourcentages de variance
par(mfrow=c(1,2))
plot(res$eig[,"eigenvalue"],type="l",xlab="Composantes",ylab="Valeurs propres")
plot(res$eig[,"percentage of variance"],type="l",xlab="Composantes",ylab="Pourcentage de variance")
cos2 <- round(sort(rowSums(res$var$cos2[,1:2])), digits = 3)
contrib <- round(sort(rowSums(res$var$contrib[,1:2])), digits = 3)
cos2 <- as.data.frame(cos2)
contrib <- as.data.frame(contrib)
df_var <- data.frame(cos2, contrib)
colnames(df_var) <- c('cos2 [-]', 'contribution [%]')
t(df_var)
## cercle de corrélation
plot.PCA(res, choix = "var", axes=c(1,2))
#individus mal représenté sur les 2 premières composantes
cos2_ind <- as.data.frame(round(sort(rowSums(res$ind$cos2[,1:2])), digits = 3))
contrib_ind <- as.data.frame(round(sort(rowSums(res$ind$contrib[,1:2])), digits = 3))
df_ind <- data.frame(cos2_ind, contrib_ind, as.factor((abalone[,1])))
colnames(df_ind) <- c('cos2 [-]', 'contribution [%]', 'Type')
vcos <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`cos2 [-]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('cos2') + labs(color='Type')
vcos
vcontrib <-ggplot(df_ind, aes(x = df_ind$Type, y = df_ind$`contribution [%]`, color=df_ind$Type)) +
geom_violin() +  xlab('Type') + ylab('Contribution [%]') + labs(color='Type')
vcontrib
# carte des individus
## avec sexe
Dataset_PCA2 <- cbind(Dataset_PCA, abalone[1])
res2 <- PCA(Dataset_PCA2, ncp = 2, graph = FALSE,
quali.sup = c(9))
plot(res2, choix = "ind", habillage = 9,
col.hab=c('lightsalmon', 'darkolivegreen4', 'steelblue1'),
label='none') +theme_gray()+ggtitle('')
abalone.lda <- lda(Type ~ .,
data = abalone,
method = "mle")
#abalone.lda
z <- predict(abalone.lda)$x
z2 <- data.frame(z, abalone[,1])
#cor(abalone[, 1], z)
ggplot(data=z2, aes(LD1, LD2,color=z2$abalone...1.)) +
geom_point(shape=20,size=1) +
scale_color_manual(values=c('lightsalmon', 'darkolivegreen4', 'steelblue1')) +
labs(color='Type') +
theme_gray()
new <- matrix(c(0.400,0.300,0.090,0.500,0.2000,0.1000,0.1500, 12),nrow=1) #nouvelles observations random
colnames(new) <- colnames(abalone)[2:9]                                    #nom des colones
rownames(new) <- "new"
new <- as.data.frame(new)
new
new2 <- matrix(c(0.8,0.6,0.15,0.7,0.5,0.3000,0.4500, 22),nrow=1) #nouvelles observations random
colnames(new2) <- colnames(abalone)[2:9]                                    #nom des colones
rownames(new2) <- "new2"
new2 <- as.data.frame(new2)
new2
# Prédiction d'un nouvel individu
Prédiction <- predict(abalone.lda, newdata = new)$class
Prédiction <- as.data.frame(Prédiction)
pred_new <- t(Prédiction)
colnames(pred_new) <- "new"
pred_new
# Prédiction d'un nouvel individu
Prédiction <- predict(abalone.lda, newdata = new2)$class
Prédiction <- as.data.frame(Prédiction)
pred_new2 <- t(Prédiction)
colnames(pred_new2) <- "new2"
pred_new2
# Qualité :
# Table de validation
Dataset.pred <- predict(abalone.lda, newdata = abalone[,2:9])$class
Dataset_dataframe <- as.data.frame(abalone)
validation <- table(Dataset_dataframe[,1], Dataset.pred)
validation
# Qualité de la règle de discrimination
qualité <- sum(diag(validation))/nrow(abalone)
qualité
summary(abalone)
res$var$cos2
res$var$contrib
plot.PCA(res, choix = "var", axes=c(1,2))
cor(abalone[, 1], z)
cor(abalone[, 1], z2)
z
z2
View(z2)
View(abalone.lda)
#abalone.lda
abalone.lda
